#!/usr/bin/env bash
#self: source 
# source <(curl -qfsSL "https://raw.githubusercontent.com/Azathothas/Toolpacks-Extras/main/.github/scripts/${HOST_TRIPLET}/pkgs/magick.sh")
set -x
#-------------------------------------------------------#
#Sanity Checks
if [ "${BUILD}" != "YES" ] || \
   [ -z "${BINDIR}" ] || \
   [ -z "${GIT_TERMINAL_PROMPT}" ] || \
   [ -z "${GIT_ASKPASS}" ] || \
   [ -z "${GITHUB_TOKEN}" ] || \
   [ -z "${GITLAB_TOKEN}" ] || \
   [ -z "${HF_REPO_DL}" ] || \
   [ -z "${SYSTMP}" ] || \
   [ -z "${TMPDIRS}" ]; then
 #exit
  echo -e "\n[+]Skipping Builds...\n"
  exit 1
fi
#-------------------------------------------------------#

#-------------------------------------------------------#
##Main
export SKIP_BUILD="YES"
#imagemagick : FOSS suite for editing and manipulating Digital Images & Files
export BIN="imagemagick"
export SOURCE_URL="https://github.com/ImageMagick/ImageMagick"
if [ "${SKIP_BUILD}" == "NO" ]; then
     echo -e "\n\n [+] (Building | Fetching) ${BIN} :: ${SOURCE_URL} [$(TZ='UTC' date +'%A, %Y-%m-%d (%I:%M:%S %p)') UTC]\n"
     #-------------------------------------------------------#
      ##Fetch
       pushd "$($TMPDIRS)" >/dev/null 2>&1
       OWD="$(realpath .)" && export OWD="${OWD}"
       export APP="magick"
       export PKG_NAME="${APP}.AppImage"
       RELEASE_TAG="$(git ls-remote --tags "${SOURCE_URL}" | awk -F/ '/tags/ && !/{}$/ {print $NF}' | tr -d "[:alpha:]" | sed 's/^[^0-9]*//; s/[^0-9]*$//' | sort --version-sort | tail -n 1 | tr -d '[:space:]')" && export RELEASE_TAG="${RELEASE_TAG}"
      ##Build
       docker stop "ubuntu-builder" 2>/dev/null ; docker rm "ubuntu-builder" 2>/dev/null
       docker run --privileged --net="host" --name "ubuntu-builder" -e GITHUB_TOKEN="${GITHUB_TOKEN}" -e RELEASE_TAG="${RELEASE_TAG}" \
       --pull="always" "azathothas/ubuntu-builder:latest" bash -l -c '
        #Build
         if command -v appimagetool >/dev/null 2>&1 && command -v go-appimagetool >/dev/null 2>&1; then
          #Setup VARS
           mkdir -p "/build-bins" && pushd "$(mktemp -d)" >/dev/null 2>&1
           export ARCH="$(uname -m)"
           export APP="magick"
           export APPDIR="${APP}.AppDir"
           export EXEC="${APP}"
           export OWD="$(realpath .)"
           mkdir -p "${OWD}/${APP}/${APP}.AppDir" && export APPDIR="${OWD}/${APP}/${APP}.AppDir"
          #Get Src & Build: https://github.com/ImageMagick/ImageMagick/blob/main/.github/workflows/release.yml
           pushd "$(mktemp -d)" >/dev/null 2>&1 && git clone --filter "blob:none" --depth="1" "https://github.com/ImageMagick/ImageMagick" && cd "./ImageMagick"
           #git checkout "$(git tag --sort=-creatordate | grep -iv "continuous" | head -n 1)"
           export VERSION="$(curl -qfsSL "https://raw.githubusercontent.com/ImageMagick/ImageMagick/refs/heads/main/app-image/AppRun" | sed -n "s#.*/\(ImageMagick-[0-9]\+\.[0-9]\+\.[0-9]\+\).*#\1#p" | sort --version-sort | tail -n 1 | tr -d "[:space:]")" && export VERSION="${VERSION}"
           [[ -n "${VERSION}" && "${VERSION}" =~ [Ii][Mm][Aa][Gg][Ee][Mm][Aa][Gg][Ii][Cc] ]] || exit 1
           export 
           #Install Deps
           packages="imagemagick intltool libbz2-dev libdjvulibre-dev libdmr-dev libfftw3-dev libfontconfig-dev libfreetype6-dev libfribidi-dev libgraphviz-dev libharfbuzz-dev libheif-dev libjbig-dev libjpeg-dev libjxl-dev liblcms-dev liblcms2-dev liblqr-1-0-dev liblzma-dev libmagick++-dev libmagickcore-dev libopenexr-dev libopenjp2-7-dev libpng-dev liblqr-dev libraqm-dev libraw-dev librsvg2-dev libtiff-dev libturbojpeg0-dev libwebp-dev libwmf-dev libx11-dev libxml2-dev zlib1g-dev libzstd-dev libgs-dev libpstoedit-dev libzip-dev pstoedit"
           sudo apt update -y -qq
           for pkg in $packages; do DEBIAN_FRONTEND="noninteractive" sudo apt install -y -qq --ignore-missing "$pkg"; done ; unset packages
           sudo add-apt-repository "ppa:strukturag/libheif" -y
           sudo add-apt-repository "ppa:strukturag/libde265" -y
           sudo apt install libheif-dev -y -qq
           make dest clean 2>/dev/null ; make clean 2>/dev/null
           export CFLAGS="-O2 -flto=auto -w -pipe"
           export CPPFLAGS="${CFLAGS}"
           export CXXFLAGS="${CFLAGS}"
           export LDFLAGS="-s -Wl,-S -Wl,--build-id=none"
           "./configure" --enable-pipes --with-autotrace --with-dps --with-flif --with-fpx --with-fftw --with-gslib --with-gvc --with-rsvg --with-modules --with-perl --with-wmf --with-utilities --with-security-policy="open" --prefix="${APPDIR}/usr" 
           make PREFIX="${APPDIR}/usr" --jobs="$(($(nproc)+1))" --keep-going install ; popd >/dev/null 2>&1
          #Prep AppDir 
           if [ -d "${APPDIR}" ] && [ $(du -s "${APPDIR}" | cut -f1) -gt 100 ] && [ -n "${VERSION}" ]; then
             cd "$(dirname "${APPDIR}")"
            #Assets
             curl -qfsSL "https://raw.githubusercontent.com/Azathothas/Toolpacks-Extras/refs/heads/main/.github/assets/appruns/imagemagick.AppRun" -o "${APPDIR}/AppRun"
             sed "s/PKG_VERSION/${VERSION}/g" -i "${APPDIR}/AppRun"
             curl -qfsSL "https://raw.githubusercontent.com/Azathothas/Toolpacks-Extras/refs/heads/main/.github/assets/desktops/imagemagick.desktop" -o "${APPDIR}/${APP}.desktop"
             sed "s/Icon=[^ ]*/Icon=${APP}/" -i "${APPDIR}/${APP}.desktop"
             rsync -achLv --mkpath "${APPDIR}/${APP}.desktop" "${APPDIR}/usr/share/applications/${APP}.desktop"
             curl -qfsSL "https://raw.githubusercontent.com/Azathothas/Toolpacks-Extras/refs/heads/main/.github/assets/icons/imagemagick.png" -o "${APPDIR}/${APP}.png"
             rsync -achLv "${APPDIR}/${APP}.png" "${APPDIR}/.DirIcon"
            #Perms 
             find "${APPDIR}" -maxdepth 1 -type f -exec chmod "u=rx,go=rx" {} + ; ls -lah "${APPDIR}"
            #Temp Move Shell scripts
             find "${APPDIR}/usr" -type f -exec grep -l "^#\\!.*sh" {} + | xargs dos2unix
             rm -rf "/tmp/.tmp" 2>/dev/null ; mkdir -p "/tmp/.tmp"
             find "${APPDIR}/usr/bin" -type f -exec grep -l "^#\\!.*sh" {} + | xargs -I{} rsync -achLv --remove-source-files --mkpath "{}" "/tmp/.tmp/bin"
            #Deploy
             https://raw.githubusercontent.com/Samueru-sama/deploy-linux.sh/refs/heads/main/deploy-linux.sh
             go-appimagetool --standalone deploy "${APPDIR}/usr/share/applications/${APP}.desktop"
             LD_LIBRARY_PATH="" find "${APPDIR}" -type f -exec ldd "{}" 2>&1 \; | grep "=>" | grep -v "${APPDIR}"
            #Restore Shell Scripts
             rsync -achLv --remove-source-files "/tmp/.tmp/" "${APPDIR}/usr/bin"
            #Create
             if [ -z "${VERSION}" ]; then
                export VERSION="latest"
             fi
             go-appimagetool --standalone --overwrite "${APPDIR}"
           fi
          #Copy
             find "." -maxdepth 1 -type f -iregex ".*\.AppImage" | xargs realpath | xargs -I {} rsync -achvL "{}" "/build-bins/${APP}.AppImage"
             file "/build-bins/"* && du -sh "/build-bins/"*
           popd >/dev/null 2>&1 ; ldd --version | head -n 1
         fi
       '
      #Copy & Meta
       docker cp "ubuntu-builder:/build-bins/." "$(pwd)/"
       docker stop "ubuntu-builder" 2>/dev/null ; docker rm "ubuntu-builder"
       find "." -maxdepth 1 -type f -iregex ".*\.AppImage" | xargs realpath | xargs -I {} rsync -achvL "{}" "${OWD}/${PKG_NAME}"
      #HouseKeeping 
       if [[ -f "${OWD}/${PKG_NAME}" ]] && [[ $(stat -c%s "${OWD}/${PKG_NAME}") -gt 1024 ]]; then
       #Version
         PKG_VERSION="$(echo ${RELEASE_TAG})" && export PKG_VERSION="${PKG_VERSION}"
         echo "${PKG_VERSION}" > "${BINDIR}/${PKG_NAME}.version"
       #Extract
         APPIMAGE="${OWD}/${PKG_NAME}" && export APPIMAGE="${APPIMAGE}" && chmod +x "${APPIMAGE}"
         "${APPIMAGE}" --appimage-extract >/dev/null && rm -f "${APPIMAGE}"
         APPIMAGE_EXTRACT="$(realpath "${OWD}/squashfs-root")" && export APPIMAGE_EXTRACT="${APPIMAGE_EXTRACT}"
       #Repack  
         if [ -d "${APPIMAGE_EXTRACT}" ] && [ $(du -s "${APPIMAGE_EXTRACT}" | cut -f1) -gt 100 ]; then
          #Fix Media & Copy
           find "${APPIMAGE_EXTRACT}" -maxdepth 1 \( -type f -o -type l \) -iname "*.png" -exec rsync -achL "{}" "${APPIMAGE_EXTRACT}/${APP}.png" \;
           if [[ ! -f "${APPIMAGE_EXTRACT}/${APP}.png" || $(stat -c%s "${APPIMAGE_EXTRACT}/${APP}.png") -le 3 ]]; then
             find "${APPIMAGE_EXTRACT}" \( -path "*/128x128/apps/*${APP%%-*}*.png" -o -path "*/256x256/*${APP%%-*}*.png" \) -printf "%s %p\n" -quit | sort -n | awk 'NR==1 {print $2}' | xargs -I "{}" magick "{}" -layers "merge" -density "1000" -background "none" -resize "256x256" -gravity "center" -extent "256x256" -verbose "${APPIMAGE_EXTRACT}/${APP}.png"
           fi
           rsync -achL "${APPIMAGE_EXTRACT}/${APP}.png" "${APPIMAGE_EXTRACT}/.DirIcon"
           rsync -achL "${APPIMAGE_EXTRACT}/${APP}.png" "${BINDIR}/${BIN}.icon.png"
           rsync -achL "${APPIMAGE_EXTRACT}/.DirIcon" "${BINDIR}/${BIN}.DirIcon"
           find "${APPIMAGE_EXTRACT}" -maxdepth 1 \( -type f -o -type l \) -iname "*.desktop" -exec rsync -achL "{}" "${APPIMAGE_EXTRACT}/${APP}.desktop" \;
           if [[ ! -f "${APPIMAGE_EXTRACT}/${APP}.desktop" || $(stat -c%s "${APPIMAGE_EXTRACT}/${APP}.desktop") -le 3 ]]; then
             find "${APPIMAGE_EXTRACT}" -path "*${APP%%-*}*.desktop" -printf "%s %p\n" -quit | sort -n | awk 'NR==1 {print $2}' | xargs -I "{}" sh -c 'rsync -achL "{}" "${APPIMAGE_EXTRACT}/${APP}.desktop"'
           fi
           sed "s/Icon=[^ ]*/Icon=${APP}/" -i "${APPIMAGE_EXTRACT}/${APP}.desktop"
           rsync -achL "${APPIMAGE_EXTRACT}/${APP}.desktop" "${BINDIR}/${BIN}.desktop"
           find "${APPIMAGE_EXTRACT}" -maxdepth 1 -type f -exec chmod "u=rx,go=rx" {} +
           ls -lah "${APPIMAGE_EXTRACT}"
          #Pack
           find "${APPIMAGE_EXTRACT}" -type f -iname "*${APP%%-*}*appdata.xml" -delete
           cd "${OWD}" && ARCH="$(uname -m)" appimagetool --comp "zstd" \
           --mksquashfs-opt -root-owned \
           --mksquashfs-opt -no-xattrs \
           --mksquashfs-opt -noappend \
           --mksquashfs-opt -b --mksquashfs-opt "1M" \
           --mksquashfs-opt -mkfs-time --mksquashfs-opt "0" \
           --mksquashfs-opt -Xcompression-level --mksquashfs-opt "22" \
           --updateinformation "zsync|${HF_REPO_DL}/${PKG_NAME}.zsync" \
           "${APPIMAGE_EXTRACT}" "${BINDIR}/${PKG_NAME}"
           find "${OWD}" -maxdepth 1 -name "*.zsync" -exec rsync -achL "{}" "${BINDIR}" \;
           rm -rf "${OWD}" && popd >/dev/null 2>&1
         fi
       #Info
         find "${BINDIR}" -type f -iname "*${APP%%-*}*" -print | xargs -I {} sh -c 'file {}; b3sum {}; sha256sum {}; du -sh {}'
         unset APPBUNLE_ROOTFS APPIMAGE APPIMAGE_EXTRACT EXEC NIX_PKGNAME OFFSET OWD PKG_NAME RELEASE_TAG ROOTFS_DIR SHARE_DIR
       fi
       #End
       popd >/dev/null 2>&1
fi
LOG_PATH="${BINDIR}/${BIN}.log" && export LOG_PATH="${LOG_PATH}"
#-------------------------------------------------------#

#-------------------------------------------------------#
##Cleanup
unset APPBUNLE_ROOTFS APP APPIMAGE APPIMAGE_EXTRACT BUILD_NIX_APPIMAGE DOWNLOAD_URL EXEC NIX_PKGNAME OFFSET OWD PKG_NAME RELEASE_TAG ROOTFS_DIR SHARE_DIR
unset SKIP_BUILD ; export BUILT="YES"
#In case of zig polluted env
unset AR CC CFLAGS CXX CPPFLAGS CXXFLAGS DLLTOOL HOST_CC HOST_CXX LDFLAGS LIBS OBJCOPY RANLIB
#In case of go polluted env
unset GOARCH GOOS CGO_ENABLED CGO_CFLAGS
#PKG Config
unset PKG_CONFIG_PATH PKG_CONFIG_LIBDIR PKG_CONFIG_SYSROOT_DIR PKG_CONFIG_SYSTEM_INCLUDE_PATH PKG_CONFIG_SYSTEM_LIBRARY_PATH
set +x
#-------------------------------------------------------#